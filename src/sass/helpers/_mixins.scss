@mixin sizeSquare($size) {
  width: $size;
  height: $size;
}
@mixin color($color) {
  color: $color;
}

@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/* ************ MIXINS ************ */

//Adds font-size in rem & px
//Value passed should be the expected px size
//Default value 12 - can be customized to fit project
@mixin font-size($sizeValue: 12) {
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.0625 * $sizeValue) + rem;
}

//Adds line-height in rem & px
//Value passed should be the expected px size
//Default value 20 - can be customized to fit project
@mixin line-height($heightValue: 20) {
  line-height: $heightValue + px; //fallback for old browsers
  line-height: (0.0625 * $heightValue) + rem;
}

//Rhythm adds font-size and line-height in rem with a px fallback
//Value passed should be the expected px size
//Default values 12, 20 - can be customized to fit project
@mixin rhythm($sizeValue: 12, $heightValue: 20) {
  @include font-size($sizeValue);
  @include line-height($heightValue);
}

@mixin padding($top, $right, $bottom, $left) {
  padding: ($top + px), ($right + px), ($bottom + px), ($left + px); //fallback for old browsers
  padding: ((0.0625 * $top) + rem), ((0.0625 * $right) + rem),
    ((0.0625 * $bottom) + rem), ((0.0625 * $left) + rem);
}

@mixin margin($top, $right, $bottom, $left) {
  margin: ($top + px), ($right + px), ($bottom + px), ($left + px); //fallback for old browsers
  margin: ((0.0625 * $top) + rem), ((0.0625 * $right) + rem),
    ((0.0625 * $bottom) + rem), ((0.0625 * $left) + rem);
}
